import os
import csv
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
ORDERS_FILE = os.path.join(os.path.dirname(__file__), "orders.csv")

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.info(f"‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...\nüìÅ –§–∞–π–ª –∑–∞–∫–∞–∑–æ–≤: {ORDERS_FILE}")

user_states = {}
user_carts = {}

ITEMS = {
    "Classic Milk Bomb": "11.00",
    "Dark Mint": "12.00",
    "White Raspberry": "13.00",
    "Salted Caramel": "12.00",
    "Minty Cool Bomb": "12.00",
    "Berry Blast": "13.00",
    "Citrus Dream": "12.00",
    "Caramel Swirl": "12.00",
    "–ù–∞–±–æ—Ä 4 —à—Ç.": "48.00",
    "–ù–∞–±–æ—Ä 6 —à—Ç.": "65.00",
    "–£–ø–∞–∫–æ–≤–∫–∞ (+2 —à—Ç)": "2.00"
}

main_menu = ReplyKeyboardMarkup([["üç´ –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞"], ["üìã –ü–æ–º–æ—â—å"]], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_carts[user.id] = []
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —à–æ–∫–æ–ª–∞–¥–Ω—ã—Ö –±–æ–º–±–æ—á–µ–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üç´ –ö–∞—Ç–∞–ª–æ–≥":
        catalog = "\n".join([f"{name}: {price}‚ÇΩ" for name, price in ITEMS.items()])
        await update.message.reply_text(f"üõç –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥:\n\n{catalog}")
    elif text in ITEMS:
        cart = user_carts.setdefault(user_id, [])
        cart.append(text)
        await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä \"{text}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        cart = user_carts.get(user_id, [])
        if not cart:
            await update.message.reply_text("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        else:
            summary = "\n".join(cart)
            total = sum(float(ITEMS[item]) for item in cart)
            await update.message.reply_text(f"üßæ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{summary}\n\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ")
    elif text == "üìã –ü–æ–º–æ—â—å":
        await update.message.reply_text("‚ùì –ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å, –Ω–∞–∂–º–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –∏ —Å–º–æ—Ç—Ä–∏ –∫–æ—Ä–∑–∏–Ω—É.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    import asyncio

    async def main():
        application = (
            ApplicationBuilder()
            .token(BOT_TOKEN)
            .build()
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        await application.run_polling()

    asyncio.run(main())